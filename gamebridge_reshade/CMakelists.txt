cmake_minimum_required(VERSION 3.23)
project (GameBridgeReshade VERSION 0.1)

add_library(${PROJECT_NAME} SHARED
    src/dllmain.cpp
    src/framework.h
    src/pch.h
    src/pch.cpp
    src/openglweaver.h
    src/openglweaver.cpp
    src/directx9weaver.h
    src/directx9weaver.cpp
    src/directx10weaver.h
    src/directx10weaver.cpp
    src/directx11weaver.h
    src/directx11weaver.cpp
    src/directx12weaver.h
    src/directx12weaver.cpp
    src/igraphicsapi.h
    src/igraphicsapi.cpp
    src/hotkey.cpp
    src/hotkey.h
    src/hotkeymanager.cpp
    src/hotkeymanager.h
    src/delayLoader.h
	src/systemEventMonitor.cpp
	src/systemEventMonitor.h
	src/configManager.h
	src/configManager.cpp
	src/versioncomparer.cpp
	src/versioncomparer.h
	src/gbConstants.h
)

if (WIN32 AND CMAKE_SIZEOF_VOID_P EQUAL 4)
	set(BUILD_PLATFORM 32)
endif()

# Set output name for the addon
set(ADDON_FILE_NAME "srReshade")
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${ADDON_FILE_NAME})

set(TARGET_IMGUI imgui)
add_subdirectory(third-party/imgui)
target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${TARGET_IMGUI})

set(TARGET_DXHEADERS DirectX-Headers)
add_subdirectory(third-party/DirectX-Headers)
target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${TARGET_DXHEADERS})

set(TARGET_RESHADE reshade)
add_subdirectory(third-party/reshade)
target_link_libraries(${PROJECT_NAME} LINK_PUBLIC ${TARGET_RESHADE})

#set(GLEW_ROOT "${CMAKE_SOURCE_DIR}/gamebridge_reshade/third-party/opengl")
add_library(glad STATIC "${CMAKE_SOURCE_DIR}/gamebridge_reshade/third-party/opengl/src/gl.c")
target_include_directories(glad PUBLIC "${CMAKE_SOURCE_DIR}/gamebridge_reshade/third-party/opengl/include")
target_include_directories(${PROJECT_NAME} PRIVATE "third-party/opengl/include")

## Add the static library directly
#add_library(GLEW STATIC IMPORTED)
#set_target_properties(GLEW PROPERTIES
#		IMPORTED_LOCATION "${GLEW_ROOT}/lib/Release/x64/glew32.lib"  # Use glew32s.lib on Windows
#		INTERFACE_INCLUDE_DIRECTORIES "${GLEW_ROOT}/include"
#)

#target_link_libraries(${PROJECT_NAME} PRIVATE GLAD OpenGL::GL)
find_package(OpenGL REQUIRED)
find_package(simulatedreality REQUIRED)
find_package(srDirectX REQUIRED)
find_package(srOpenGL REQUIRED)

# Rename dll with extension .addon
add_custom_command(
	TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND}
	ARGS -E copy_if_different $<TARGET_FILE:${PROJECT_NAME}> $<TARGET_FILE_DIR:${PROJECT_NAME}>/${ADDON_FILE_NAME}.addon
)

# Copy dll to reshade directory
set(ADDON_COPY_DIR "" CACHE STRING "Path where the .addon file will be copied to on successful build")
if(NOT ${ADDON_COPY_DIR} STREQUAL "")
	add_custom_command(
		TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E make_directory ${ADDON_COPY_DIR}
		COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE_DIR:${PROJECT_NAME}>/${ADDON_FILE_NAME}.addon ${ADDON_COPY_DIR}
	)
	message("Addon will be copied to ${ADDON_COPY_DIR}")
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE
		glad
		delayimp
		simulatedreality
		srDirectX${BUILD_PLATFORM}::srDirectX
		srOpenGL${BUILD_PLATFORM}::srOpenGL
		OpenGL::GL
)
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:SimulatedRealityDisplays${BUILD_PLATFORM}.dll")
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:SimulatedRealityCore${BUILD_PLATFORM}.dll")
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:SimulatedRealityDirectX${BUILD_PLATFORM}.dll")
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:SimulatedRealityOpenGL${BUILD_PLATFORM}.dll")
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:SimulatedReality${BUILD_PLATFORM}.dll")
 target_link_options(${PROJECT_NAME} PRIVATE "/DELAYLOAD:opencv_world343.dll")

get_target_property(LINKED_LIBS ${PROJECT_NAME} LINK_LIBRARIES)
message(STATUS "MyTarget links with: ${LINKED_LIBS}")
